<html>

<head>
<link rel="stylesheet" type="text/css" href="pascal.css">
<title>Essential Pascal</title>
</head>

<body TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#551A8B" VLINK="#663366" ALINK="#FF0000">

<!-- top -->
<table border="0" width="100%" cellpadding="10">
<tr><td align="center"> 
<img src="../gif/books.gif" alt="Logo" width=249 height=100 border=0></td>   
<td>
<ul><li><a href="http://www.marcocantu.com">
 	www.marcocantu.com</a>
<li><a href="http://www.marcocantu.com/books">
	Marco's Delphi Books</a>
<li><a 	href="http://www.marcocantu.com/epascal">
	Essential Pascal - Web Site</a>
<li><a href="default.htm">
	Essential Pascal - Local Index</a>
</ul></td></tr>
<tr bgcolor="#FFC891"><td valign="bottom">
    <h1>Marco Cant&ugrave;'s<br>Essential Pascal</h1></td>
<td valign="bottom">
    <h1>Appendix A<br>Glossary</h1>
</td></tr>
</table> 

<!-- text -->

<p>This is a short glossary of technical terms used throughout the book. They might also be defined elsewhere in the text, but I've decided to collect them here anyway, to make it easier to find them.

<h2>Heap (Memory)</h2>

<p>The term <i>Heap</i> indicates a portion of the memory available to a program, also called dynamic memory area. The heap is the area in which the allocation and deallocation of memory happens in random order. This means that if you allocate three blocks of memory in sequence, they can be destroyed later on in any order. The heap manager takes care of all the details for you, so you simply ask for new memory with GetMem or by calling a constructor to create an object, and Delphi will return you a new memory block (optionally reusing memory blocks already discarded).
<p>The heap is one of the three memory areas available to an application. The other two are the global area (this is where global variables live) and the stack. Contrary to the heap, global variables are allocated when the program starts and remain there until it terminates. For the stack see the specific entry in this glossary.
<p>Delphi uses the heap for allocating the memory of each and every object, the text of the strings, for dynamic arrays, and for specific requests of dynamic memory (GetMem).
<p>Windows allows an application to have up to 2 GigaBytes of address space, most of which can be used by the heap.

<h2>Stack (Memory)</h2>

<p>The term Stack indicates a portion of the memory available to a program, which is dynamic but is allocated and deallocated following specific order. The stack allocation is LIFO, Last In First Out. This means that the last memory object you've allocated will be the first to be deleted. Stack memory is typically used by routines (procedure, function, and method calls). When you call a routine, its parameters and return type are placed on the stack (unless you optimize the call, as Delphi does by default). Also the variables you declare within a routine (using a <i>var</i> block before the begin statement) are stored on the stack, so that when the routine terminates they'll be automatically removed (before getting back to the calling routine, in LIFO order). 
<p>The stack is one of the three memory areas available to an application. The other two are called global memory and heap. See the heap entry in this glossary..
<p>Delphi uses the stack for routine parameters and return values (unless you use the default register calling convention), for local routine variables, for Windows API function calls, and so on. 
<p>Windows applications can reserve a large amount of memory for the stack. In Delphi you set this in the linker page of the project options, however, the default generally does it. If you receive a stack full error message this is probably because you have a function recursively calling itself forever, not because the stack space is too limited.

<h2>New requested terms</h2>
<ul>
<li>Dynamic
<li>Static
<li>Virtual
<li>memory leak
<li>painting
<li>literal
<li>array
<li>API
<li>class reference
<li>class method
<li>parent
<li>owner
<li>self
</ul>

<p class="copyr">&copy; Copyright Marco Cant&ugrave;, Wintech Italia Srl 1995-2000</p>
</body></html>

